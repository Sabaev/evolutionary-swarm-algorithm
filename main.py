# coding: utf8

import random
import numpy as np
import copy

# Таблица
Table = np.array((
    (902000, 115800),
    (462000, 96000),
    (465000, 790000),
    (545000, 908000),
    (311000, 396000),
    (675000, 984000),
    (128000, 189000),
    (105000, 103000),
    (215000, 285000),
    (31000, 70000),
    (42000, 90000),
    (78000, 73000),
))

# Тестовые значения
Table_test = np.array((
    (25.9, 117.6),
    (24.6, 117.6),
    (7.7, 31.2),
    (8.2, 36),
    (9.7, 25.2),
    (2.2, 8.4),
    (3.5, 10.8),
    (66.6, 352.8),
    (7.5, 72),
    (20, 72),
    (6, 24),
    (100, 360),
    (11.3, 36),
    (100, 215),
    (20, 48),
    (100, 360),
    (150, 324),
    (31.5, 60),
    (15, 48),
    (32.5, 60),
    (19.7, 60),
    (66.6, 300),
    (29.5, 120),
    (15, 90),
    (38, 210),
    (10, 48),
    (15.4, 70),
    (48.5, 239),
    (16.3, 82),
    (12.8, 62),
    (32.6, 170),
    (35.5, 192),
    (5.5, 18),
    (10.4, 50),
    (14, 60),
    (6.5, 42),
    (13, 60),
    (90, 444),
    (8, 42),
    (16, 114),
    (177.9, 1248),
    (302, 2400),
    (282.1, 1368),
    (284.7, 973),
    (79, 400),
    (423, 2400),
    (190, 420),
    (47.5, 252),
    (21, 107),
    (78, 571.4),
    (11.4, 98.8),
    (19.3, 155),
    (101, 750),
    (219, 2120),
    (50, 370),
    (227, 1181),
    (70, 278),
    (0.9, 8.4),
    (980, 4560),
    (350, 720),
    (70, 458),
    (271, 2460),
    (90, 162),
    (40, 150),
    (137, 636),
    (150, 882),
    (339, 444),
    (240, 192),
    (144, 576),
    (151, 432),
    (34, 72),
    (98, 300),
    (85, 300),
    (20, 240),
    (111, 600),
    (162, 756),
    (352, 1200),
    (165, 97),
    (60, 409),
    (100, 703),
    (32, 1350),
    (53, 480),
    (41, 599),
    (24, 430),
    (165, 4178.2),
    (65, 1772.5),
    (70, 1645.9),
    (50, 1924.5),
    (7.25, 648),
    (233, 8211),
    (16.3, 480),
    (6.2, 12),
    (3, 38),
))


# Фитнес функция:
# Манхэттен – метрика городских кварталов
def MD(x, T=Table):
    s = 0.0
    for el in T:
        s += abs(x[0] * el[0] ** x[1] - el[1])
    return s


# Генератор рандомных значений
def generate(N, lb=0.0, rb=10.0):
    r = []
    for i in range(N):
        r.append((random.uniform(lb, rb), random.uniform(lb, rb)))

    return r


# Роевой алгоритм
def ra(N, T, c1=1, c2=1):
    Y = np.array(generate(N))
    X = Y.copy()
    # X = Y
    ymax = copy.copy(Y[0])
    v = [0] * N

    for i in range(T):
        for j in range(N):
            if MD(X[j]) < MD(Y[j]):
                Y[j] = X[j]

            if MD(Y[j]) < MD(ymax):
                ymax = Y[j]
                # ymax = copy.copy(Y[j])
                # print(MD(ymax))

        for j in range(N):
            v[j] = v[j] + c1 * random.uniform(0.0, 1.0) * (Y[j] - X[j]) + c2 * random.uniform(0.0, 1.0) * (ymax - X[j])
            X[j] = X[j] + v[j]

    return ymax


# val = ra(750, 2500, c1=1, c2=1)
val = ra(20, 200, c1=1.5, c2=1.5)
print(val)
print(MD(val, Table))
print(MD(val, Table_test))
